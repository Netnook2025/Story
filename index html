<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>صانع لوحة القصة للفيديو</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Cairo', sans-serif;
        }
        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        <div class="bg-white rounded-xl shadow-lg p-6 md:p-8 text-center">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-4">صانع لوحة القصة للفيديو</h1>
            <p class="text-gray-600 mb-6">أدخل فكرة الفيديو الخاص بك، وسأقوم بإنشاء سيناريو مرئي (Storyboard) لمساعدتك على البدء.</p>

            <div class="flex flex-col sm:flex-row gap-3">
                <input type="text" id="video-prompt" placeholder="مثال: فيديو عن استكشاف الفضاء" class="flex-grow p-3 border border-gray-300 rounded-lg text-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button id="generate-btn" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700 transition duration-300 text-lg">
                    ✨ أنشئ القصة
                </button>
            </div>
        </div>

        <div id="loading" class="hidden flex-col items-center justify-center mt-8">
            <div class="loader"></div>
            <p class="text-gray-600 mt-4">جاري إنشاء القصة المرئية... قد يستغرق هذا بعض الوقت.</p>
        </div>
        
        <div id="error" class="hidden text-center mt-8 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg">
        </div>

        <div id="storyboard" class="mt-8 grid grid-cols-1 gap-8">
            <!-- Scenes will be generated here -->
        </div>
    </div>

    <script type="module">
        // --- DOM Elements ---
        const generateBtn = document.getElementById('generate-btn');
        const promptInput = document.getElementById('video-prompt');
        const loadingDiv = document.getElementById('loading');
        const storyboardDiv = document.getElementById('storyboard');
        const errorDiv = document.getElementById('error');

        // --- Event Listener ---
        generateBtn.addEventListener('click', handleGeneration);
        promptInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleGeneration();
            }
        });
        
        /**
         * Main function to handle the storyboard generation process.
         */
        async function handleGeneration() {
            const userPrompt = promptInput.value.trim();
            if (!userPrompt) {
                showError("الرجاء إدخال فكرة للفيديو أولاً.");
                return;
            }

            // --- Reset UI ---
            storyboardDiv.innerHTML = '';
            showError(null);
            loadingDiv.classList.remove('hidden');
            generateBtn.disabled = true;
            generateBtn.classList.add('opacity-50', 'cursor-not-allowed');

            try {
                // Step 1: Generate the script from the user prompt
                const scenes = await generateScript(userPrompt);

                // Step 2: Generate an image for each scene
                await generateImagesForScenes(scenes);

            } catch (err) {
                console.error("An error occurred:", err);
                showError(`حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى. التفاصيل: ${err.message}`);
            } finally {
                // --- Finalize UI ---
                loadingDiv.classList.add('hidden');
                generateBtn.disabled = false;
                generateBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        }

        /**
         * Generates a script with distinct scenes using the Gemini API.
         * @param {string} topic - The user's topic for the video.
         * @returns {Promise<Array<Object>>} - A promise that resolves to an array of scene objects.
         */
        async function generateScript(topic) {
            console.log("Generating script for:", topic);
            const prompt = `
                أنشئ سيناريو فيديو قصير من 4 مشاهد حول الموضوع التالي: "${topic}".
                يجب أن يكون الرد بتنسيق JSON.
                يجب أن يحتوي كل مشهد على "scene_number" و "scene_description" (وصف موجز للمشهد باللغة العربية) و "visual_prompt" (وصف مرئي بسيط باللغة الإنجليزية لإنشاء صورة).
            `;

            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = {
                contents: chatHistory,
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                           "scenes": {
                                type: "ARRAY",
                                items: {
                                    type: "OBJECT",
                                    properties: {
                                        "scene_number": { "type": "NUMBER" },
                                        "scene_description": { "type": "STRING" },
                                        "visual_prompt": { "type": "STRING" }
                                    },
                                    required: ["scene_number", "scene_description", "visual_prompt"]
                                }
                           }
                        }
                    }
                }
            };
            
            const apiKey = ""; 
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0].text) {
                const jsonText = result.candidates[0].content.parts[0].text;
                const parsedJson = JSON.parse(jsonText);
                console.log("Script generated:", parsedJson.scenes);
                return parsedJson.scenes;
            } else {
                throw new Error("لم يتمكن الذكاء الاصطناعي من إنشاء سيناريو. حاول مرة أخرى بفكرة مختلفة.");
            }
        }

        /**
         * Iterates through scenes, creates UI elements, and calls the image generation API for each.
         * @param {Array<Object>} scenes - The array of scene objects.
         */
        async function generateImagesForScenes(scenes) {
             // Sort scenes just in case the API doesn't return them in order
            scenes.sort((a, b) => a.scene_number - b.scene_number);

            for (const scene of scenes) {
                const sceneElement = createSceneElement(scene);
                storyboardDiv.appendChild(sceneElement);
                
                const imageContainer = sceneElement.querySelector('.image-container');
                try {
                    const imageUrl = await generateImage(scene.visual_prompt);
                    const imageElement = imageContainer.querySelector('img');
                    imageContainer.querySelector('.image-loader').classList.add('hidden');
                    imageElement.src = imageUrl;
                    imageElement.classList.remove('hidden');
                } catch(err) {
                    console.error("Image generation failed for scene:", scene.scene_number, err);
                    imageContainer.innerHTML = `<div class="w-full h-full bg-gray-200 flex items-center justify-center text-center text-red-500 p-4 rounded-lg">فشل تحميل الصورة.</div>`;
                }
            }
        }

        /**
         * Generates a single image using the Imagen API.
         * @param {string} prompt - The visual prompt for the image.
         * @returns {Promise<string>} - A promise that resolves to the Base64 image data URL.
         */
        async function generateImage(prompt) {
            console.log("Generating image for prompt:", prompt);
            // Enhance prompt for better image quality
            const enhancedPrompt = `${prompt}, cinematic style, vibrant colors, detailed`;
            
            const payload = { 
                instances: [{ prompt: enhancedPrompt }],
                parameters: { "sampleCount": 1 } 
            };
            
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();

            if (result.predictions && result.predictions[0]?.bytesBase64Encoded) {
                return `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
            } else {
                throw new Error("فشلت استجابة واجهة برمجة التطبيقات الخاصة بالصور.");
            }
        }

        /**
         * Creates the HTML structure for a single scene card.
         * @param {Object} scene - The scene object containing description and number.
         * @returns {HTMLElement} - The div element for the scene.
         */
        function createSceneElement(scene) {
            const sceneDiv = document.createElement('div');
            sceneDiv.className = 'scene-card bg-white rounded-xl shadow-lg overflow-hidden flex flex-col md:flex-row';
            
            sceneDiv.innerHTML = `
                <div class="md:w-1/2 p-6 flex flex-col justify-center">
                    <h2 class="text-2xl font-bold text-blue-600 mb-2">المشهد ${scene.scene_number}</h2>
                    <p class="text-gray-700 text-lg">${scene.scene_description}</p>
                </div>
                <div class="md:w-1/2 bg-gray-200 min-h-[250px] flex items-center justify-center image-container">
                    <div class="loader image-loader"></div>
                    <img src="" alt="صورة تم إنشاؤها للمشهد ${scene.scene_number}" class="w-full h-full object-cover hidden">
                </div>
            `;
            return sceneDiv;
        }
        
        /**
         * Displays an error message to the user or hides the error box.
         * @param {string|null} message - The error message to display, or null to hide.
         */
        function showError(message) {
            if (message) {
                errorDiv.textContent = message;
                errorDiv.classList.remove('hidden');
            } else {
                errorDiv.classList.add('hidden');
            }
        }

    </script>
</body>
</html>
